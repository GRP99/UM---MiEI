#BlueJ class context
comment0.target=Ponto
comment0.text=\r\n\ Classe\ que\ implementa\ um\ Ponto\ num\ plano2D.\r\n\ As\ coordenadas\ do\ Ponto\ s\u00C3\u00A3o\ inteiras.\r\n\r\n\ @author\ \ MaterialPOO\r\n\ @version\ 20180212\r\n
comment1.params=
comment1.target=Ponto()
comment1.text=\r\n\ Construtor\ por\ omiss\u00C3\u00A3o\ de\ Ponto.\r\n
comment10.params=cx\ cy
comment10.target=void\ movePonto(int,\ int)
comment10.text=\r\n\ M\u00C3\u00A9todo\ que\ move\ o\ Ponto\ para\ novas\ coordenadas.\r\n\ @param\ novoX\ novo\ valor\ de\ x.\r\n\ @param\ novoY\ novo\ valor\ de\ y.\r\n
comment11.params=
comment11.target=boolean\ ePositivo()
comment11.text=\r\n\ M\u00C3\u00A9todo\ que\ determina\ se\ o\ ponto\ est\u00C3\u00A1\ no\ quadrante\ positivo\ de\ x\ e\ y\r\n\ @return\ booleano\ que\ \u00C3\u00A9\ verdadeiro\ se\ x>0\ e\ y>0\r\n
comment12.params=umPonto
comment12.target=double\ distancia(HashCode_Comparator.Ponto)
comment12.text=\r\n\ M\u00C3\u00A9todo\ que\ determina\ a\ dist\u00C3\u00A2ncia\ de\ um\ Ponto\ a\ outro.\r\n\ @param\ umPonto\ ponto\ ao\ qual\ se\ quer\ determinar\ a\ dist\u00C3\u00A2ncia\r\n\ @return\ double\ com\ o\ valor\ da\ dist\u00C3\u00A2ncia\r\n
comment13.params=umPonto
comment13.target=boolean\ iguais(HashCode_Comparator.Ponto)
comment13.text=\r\n\ M\u00C3\u00A9todo\ que\ determina\ se\ dois\ pontos\ s\u00C3\u00A3o\ iguais.\r\n\ @return\ booleano\ que\ \u00C3\u00A9\ verdadeiro\ se\ os\ valores\ das\ duas\ \r\n\ coordenadas\ forem\ iguais\r\n
comment14.params=
comment14.target=boolean\ xIgualAy()
comment14.text=\r\n\ M\u00C3\u00A9todo\ que\ determina\ se\ o\ m\u00C3\u00B3dulo\ das\ duas\ coordenadas\ \u00C3\u00A9\ o\ mesmo.\r\n\ @return\ true,\ se\ as\ coordenadas\ em\ x\ e\ y\ \r\n\ forem\ iguais\ em\ valor\ absoluto.\r\n
comment15.params=
comment15.target=java.lang.String\ toString()
comment15.text=\r\n\ M\u00C3\u00A9todo\ que\ devolve\ a\ representa\u00C3\u00A7\u00C3\u00A3o\ em\ String\ do\ Ponto.\r\n\ @return\ String\ com\ as\ coordenadas\ x\ e\ y\r\n
comment16.params=
comment16.target=HashCode_Comparator.Ponto\ clone()
comment16.text=\r\n\ M\u00C3\u00A9todo\ que\ faz\ uma\ c\u00C3\u00B3pia\ do\ objecto\ receptor\ da\ mensagem.\r\n\ Para\ tal\ invoca\ o\ construtor\ de\ c\u00C3\u00B3pia.\r\n\ \r\n\ @return\ objecto\ clone\ do\ objecto\ que\ recebe\ a\ mensagem.\r\n
comment17.params=
comment17.target=int\ hashCode()
comment17.text=\r\n\ Implementa\u00C3\u00A7\u00C3\u00A3o\ do\ m\u00C3\u00A9todo\ hashcode.\r\n\ Este\ m\u00C3\u00A9todo\ \u00C3\u00A9\ necess\u00C3\u00A1rio\ sempre\ que\ for\ preciso\ criar\ estruturas\ baseadas\ em\ hash.\r\n\ Dessa\ forma\ cada\ uma\ das\ inst\u00C3\u00A2ncias\ de\ Ponto\ ser\u00C3\u00A1\ capaz\ de\ calcular\ o\ seu\ valor\ de\ hash.\r\n\ \r\n\ Note-se\ que\ sempre\ que\ sempre\ que\ a\ compara\u00C3\u00A7\u00C3\u00A3o,\ com\ equals,\ de\ dois\ objectos\ d\u00C3\u00AA\ true,\ \r\n\ ent\u00C3\u00A3o\ os\ seus\ valores\ de\ hashcode\ devem\ ser\ o\ mesmo.\r\n\ \r\n\ Isto\ \u00C3\u00A9,\ se\ \ (o1.equals(o2))\ \=\=\ true,\ ent\u00C3\u00A3o\ o1.hashcode()\ \=\=\ o2.hashcode()\r\n\ \r\n\ \r\n
comment18.params=p
comment18.target=int\ compareTo(HashCode_Comparator.Ponto)
comment18.text=\r\ntodo\ que\ implementa\ a\ ordem\ natural.\r\n
comment2.params=cx\ cy
comment2.target=Ponto(int,\ int)
comment2.text=\r\n\ Construtor\ parametrizado\ de\ Ponto.\r\n\ Aceita\ como\ par\u00C3\u00A2metros\ os\ valores\ para\ cada\ coordenada.\r\n
comment3.params=umPonto
comment3.target=Ponto(HashCode_Comparator.Ponto)
comment3.text=\r\n\ Construtor\ de\ c\u00C3\u00B3pia\ de\ Ponto.\r\n\ Aceita\ como\ par\u00C3\u00A2metro\ outro\ Ponto\ e\ utiliza\ os\ m\u00C3\u00A9todos\r\n\ de\ acesso\ aos\ valores\ das\ vari\u00C3\u00A1veis\ de\ inst\u00C3\u00A2ncia.\r\n
comment4.params=
comment4.target=int\ getX()
comment4.text=\r\n\ Devolve\ o\ valor\ da\ coordenada\ em\ x.\r\n\ \r\n\ @return\ valor\ da\ coordenada\ x.\r\n
comment5.params=
comment5.target=int\ getY()
comment5.text=\r\n\ Devolve\ o\ valor\ da\ coordenada\ em\ y.\r\n\ \r\n\ @return\ valor\ da\ coordenada\ y.\r\n
comment6.params=novoX
comment6.target=void\ setX(int)
comment6.text=\r\n\ Actualiza\ o\ valor\ da\ coordenada\ em\ x.\r\n\ \r\n\ @param\ novoX\ novo\ valor\ da\ coordenada\ em\ X\r\n
comment7.params=novoY
comment7.target=void\ setY(int)
comment7.text=\r\n\ Actualiza\ o\ valor\ da\ coordenada\ em\ y.\r\n\ \r\n\ @param\ novoY\ novo\ valor\ da\ coordenada\ em\ Y\r\n
comment8.params=deltaX\ deltaY
comment8.target=void\ deslocamento(int,\ int)
comment8.text=\r\n\ M\u00C3\u00A9todo\ que\ desloca\ um\ ponto\ somando\ um\ delta\ \u00C3\u00A0s\ coordenadas\r\n\ em\ x\ e\ y.\r\n\ \r\n\ @param\ deltaX\ valor\ de\ deslocamento\ do\ x\r\n\ @param\ deltaY\ valor\ de\ deslocamento\ do\ y\r\n
comment9.params=umPonto
comment9.target=void\ somaPonto(HashCode_Comparator.Ponto)
comment9.text=\r\n\ M\u00C3\u00A9todo\ que\ soma\ as\ componentes\ do\ Ponto\ passado\ como\ par\u00C3\u00A2metro.\r\n\ @param\ umPonto\ ponto\ que\ \u00C3\u00A9\ somado\ ao\ ponto\ receptor\ da\ mensagem.\r\n
numComments=19
