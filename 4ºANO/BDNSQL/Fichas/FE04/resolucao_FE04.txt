Exercicio 1 

1) show dbs
2) use customers
3) db
4) db.createCollection("customers")
5) show collections
6) db.customers.insert( { first_name: 'John', last_name: 'Doe', age: 30 } )
7) db.customers.insert( { first_name: 'Steven', last_name:'Williams', gender: 'male'})
   db.customers.insert( { first_name: 'Mary', last_name: 'Troy', age: 19})
8) db.customers.insert( { first_name: 'Ric', last_name: 'Foe', address: {street: '4 main st', city: 'Boston'} } )
9) db.customers.insert( { first_name: 'Ana', last_name: 'Durant', degree: ['phD','Msc'], address: {street: '4 Square Garden', city: 'New York'}, age: 32 } )
10) db.customers.insert( { first_name: 'Natalia', last_name:'Will', age: 44, gender: 'female' } )
11) db.customers.find()
12) db.customers.find().pretty()
13) db.customers.update({first_name: 'Ric'},{$set : {age:45}})
14) db.customers.find({last_name: {$regex: 'Will', $options: "$i"}})	
15) db.customers.update({first_name: 'Steven'},{$set : {age:35}})
16) db.customers.update({first_name: 'Ana',age: {$gt: 30}},{$inc: {age:10}})
17) db.customers.update({first_name: 'Ric'},{$unset : {age:''}})
18) db.customers.update({first_name: 'Jimy'},{$set: {first_name: 'Jimmy', last_name: 'Connors', age: 25, gender: 'male'}},{upsert:true})
19) db.customers.find({age: {$gt: 25}})
20) db.customers.find({gender: 'male'})
21) db.customers.remove({first_name: 'Mary'})
22) db.customers.find({$or :[{first_name: 'Ana'},{first_name: 'Ric'}]})

Exercicio 2

1) db.restaurants.find()
2) db.restaurants.aggregate({ $project:{address: 0, grades:0}})
3) db.restaurants.aggregate({ $project:{_id:0, address: 0, grades:0}})
4) db.restaurants.aggregate({ $project:{_id:0, restaurant_id:1,name:1, borough:1,"address.zipcode":1}})
5) db.restaurants.find({borough:'Bronx'})
6) db.restaurants.find({borough:'Bronx'}).limit(5)
7) db.restaurants.find({borough:'Bronx'}).skip(5).limit(5)
8) db.restaurants.find({"grades.score": {$gt: 90}})
9) db.restaurants.find({$and :[{"grades.score": {$gt: 80}}, {"grades.score": {$lt: 100}}]})
10) db.restaurants.find({"address.coord.0": {$lt: -95.754168}})
11) db.restaurants.update ({cuisine:'American '}, {$set: {cuisine:'American'}}, {multi:true})
12) db.restaurants.find({$and :[{"grades.score": {$gt: 70}}, {"address.coord.0": {$lt: -65.754168}}, {cuisine:{$ne: 'American'}} ]})
13) db.restaurants.find({"cuisine":{$ne: "American"}, "grades.score" : { $gt : 70} , "address.coord.0" : {$lt: -65.754168}})
14) db.restaurants.find({$and :[{"grades.grade": 'A'}, {cuisine:{$ne: 'American'}}, {borough:{$ne: 'Brookly'}} ]}).sort({cuisine: -1})
15) db.restaurants.find({$and :[{borough:'Bronx'}, {$or :[{cuisine: 'American'},{cuisine: 'Chinese'}]} ]})
16) db.restaurants.find({"address.coord" : {$type : "double"}})
17) db.restaurants.find({"address.street": {$exists: true}})
18) db.restaurants.find().sort({cuisine: 1},{borough: -1 })
19) db.restaurants.aggregate([ {$project:{_id:0, restaurant_id:1,name:1, address:1}}, {$match:{$and :[{"address.coord.1": {$gt: 42}}, {"address.coord.1": {$lt: 52}}]}}])
20) db.restaurants.aggregate([ {$project:{_id:0, restaurant_id:1,name:1, borough:1, cuisine:1}}, {$match: {"grades.score": {$lt: 10}} }])
21) db.restaurants.aggregate([ {$project:{_id:0, restaurant_id:1,name:1, borough:1, cuisine:1}}, {$match: {$or :[{borough:{$ne: 'Staten Islan'}},{borough:{$ne: 'Queens'}},{borough:{$ne: 'Bronx'}},{borough:{$ne: 'Brooklin'}}]} }])





